'use strict';
<<<<<<< HEAD
const {PassThrough: PassThroughStream} = require('stream');

module.exports = options => {
	options = {...options};

	const {array} = options;
	let {encoding} = options;
	const isBuffer = encoding === 'buffer';
	let objectMode = false;

	if (array) {
		objectMode = !(encoding || isBuffer);
=======
const {PassThrough} = require('stream');

module.exports = options => {
	options = Object.assign({}, options);

	const {array} = options;
	let {encoding} = options;
	const buffer = encoding === 'buffer';
	let objectMode = false;

	if (array) {
		objectMode = !(encoding || buffer);
>>>>>>> fba966e13ccf31bc90dce1fa55afc166253be3c1
	} else {
		encoding = encoding || 'utf8';
	}

<<<<<<< HEAD
	if (isBuffer) {
		encoding = null;
	}

	const stream = new PassThroughStream({objectMode});
=======
	if (buffer) {
		encoding = null;
	}

	let len = 0;
	const ret = [];
	const stream = new PassThrough({objectMode});
>>>>>>> fba966e13ccf31bc90dce1fa55afc166253be3c1

	if (encoding) {
		stream.setEncoding(encoding);
	}

<<<<<<< HEAD
	let length = 0;
	const chunks = [];

	stream.on('data', chunk => {
		chunks.push(chunk);

		if (objectMode) {
			length = chunks.length;
		} else {
			length += chunk.length;
=======
	stream.on('data', chunk => {
		ret.push(chunk);

		if (objectMode) {
			len = ret.length;
		} else {
			len += chunk.length;
>>>>>>> fba966e13ccf31bc90dce1fa55afc166253be3c1
		}
	});

	stream.getBufferedValue = () => {
		if (array) {
<<<<<<< HEAD
			return chunks;
		}

		return isBuffer ? Buffer.concat(chunks, length) : chunks.join('');
	};

	stream.getBufferedLength = () => length;
=======
			return ret;
		}

		return buffer ? Buffer.concat(ret, len) : ret.join('');
	};

	stream.getBufferedLength = () => len;
>>>>>>> fba966e13ccf31bc90dce1fa55afc166253be3c1

	return stream;
};
